import Testing
@testable import CoreShogi

@Test func example() async throws {
    // Write your test here and use APIs like `#expect(...)` to check expected conditions.
}

fileprivate extension String {
	var lines: [String] {
		var lines = [String]()
		self.enumerateLines { (line, stop) -> () in
			lines.append(line)
		}
		return lines
	}
}

struct BasicTest {

	@Test func 段筋確認() throws {
		#expect(段型(number: 1) == .一)
		#expect(筋型(number: 1) == .１)
		#expect(段型(number: 5) == .五)
		#expect(筋型(number: 5) == .５)
		#expect(段型(number: 9) == .九)
		#expect(筋型(number: 9) == .９)
	}

	@Test func 位置確認() throws {
		#expect(位置型.９一.筋 == .９)
		#expect(位置型.９一.段 == .一)

		#expect(位置型.７三.筋 == .７)
		#expect(位置型.７三.段 == .三)
		
		#expect(位置型.２七.筋 == .２)
		#expect(位置型.２七.段 == .七)

		#expect(位置型.５九.筋 == .５)
		#expect(位置型.５九.段 == .九)

		#expect(位置型.１一.筋 == .１)
		#expect(位置型.１一.段 == .一)
		
		#expect(位置型(筋: .１, 段: .一) == .１一)
		#expect(位置型(筋: .９, 段: .九) == .９九)
		#expect(位置型(筋: .５, 段: .五) == .５五)
	}

	@Test func ランダム20手対局() {
		var 局面 = 対局型(手合: .平手).局面
		var count = 20
		while count > 0 {
			print("=====")
			print(局面)
			let 指手列 = 局面.可能指手列()
			if let 指手 = 指手列.randomElement() {
				if let 次局面 = 局面.実行(指手: 指手) {
					局面 = 次局面
					count -= 1
				}
				else { break }
			}
			else { break }
		}
	}

	var 初期局面: 局面型 {
		return try! 局面型(string:
			"""
			持駒: なし
			|▽香|▽桂|▽銀|▽金|▽玉|▽金|▽銀|▽桂|▽香|
			|　・|▽飛|　・|　・|　・|　・|　・|▽角|　・|
			|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|▲歩|▲歩|▲歩|▲歩|▲歩|▲歩|▲歩|▲歩|▲歩|
			|　・|▲角|　・|　・|　・|　・|　・|▲飛|　・|
			|▲香|▲桂|▲銀|▲金|▲玉|▲金|▲銀|▲桂|▲香|
			持駒: なし
			手番: 先手
			""")
	}

	@Test func T001() {
		let 局面 = 対局型(手合: .平手).局面
		#expect(局面 == self.初期局面)
		#expect(局面.手番 == .先手)
		#expect(局面.先手持駒 == [:])
		#expect(局面.後手持駒 == [:])
	}
	@Test func T002() {
		let 初期局面 = self.初期局面
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .９九, 移動先が自駒の場合も含む: false)) == [.９八]) // ▲香
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .８九, 移動先が自駒の場合も含む: false)) == []) // ▲桂
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .７九, 移動先が自駒の場合も含む: false)) == [.７八, .６八]) // ▲銀
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .６九, 移動先が自駒の場合も含む: false)) == [.７八, .６八, .５八]) // ▲金
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .５九, 移動先が自駒の場合も含む: false)) == [.６八, .５八, .４八]) // ▲玉
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .４九, 移動先が自駒の場合も含む: false)) == [.５八, .４八, .３八]) // ▲金
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .３九, 移動先が自駒の場合も含む: false)) == [.４八, .３八]) // ▲銀
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .２九, 移動先が自駒の場合も含む: false)) == []) // ▲桂
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .１九, 移動先が自駒の場合も含む: false)) == [.１八]) // ▲香
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .８八, 移動先が自駒の場合も含む: false)) == []) // ▲角
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .２八, 移動先が自駒の場合も含む: false)) == [.７八, .６八, .５八, .４八, .３八, .１八]) // ▲飛
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .９七, 移動先が自駒の場合も含む: false)) == [.９六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .８七, 移動先が自駒の場合も含む: false)) == [.８六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .７七, 移動先が自駒の場合も含む: false)) == [.７六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .６七, 移動先が自駒の場合も含む: false)) == [.６六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .５七, 移動先が自駒の場合も含む: false)) == [.５六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .４七, 移動先が自駒の場合も含む: false)) == [.４六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .３七, 移動先が自駒の場合も含む: false)) == [.３六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .２七, 移動先が自駒の場合も含む: false)) == [.２六]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .１七, 移動先が自駒の場合も含む: false)) == [.１六]) // ▲歩

		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .９一, 移動先が自駒の場合も含む: false)) == [.９二]) // ▲香
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .８一, 移動先が自駒の場合も含む: false)) == []) // ▲桂
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .７一, 移動先が自駒の場合も含む: false)) == [.７二, .６二]) // ▲銀
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .６一, 移動先が自駒の場合も含む: false)) == [.７二, .６二, .５二]) // ▲金
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .５一, 移動先が自駒の場合も含む: false)) == [.６二, .５二, .４二]) // ▲玉
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .４一, 移動先が自駒の場合も含む: false)) == [.５二, .４二, .３二]) // ▲金
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .３一, 移動先が自駒の場合も含む: false)) == [.４二, .３二]) // ▲銀
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .２一, 移動先が自駒の場合も含む: false)) == []) // ▲桂
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .１一, 移動先が自駒の場合も含む: false)) == [.１二]) // ▲香
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .８二, 移動先が自駒の場合も含む: false)) == [.９二, .７二, .６二, .５二, .４二, .３二]) // ▲飛
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .２二, 移動先が自駒の場合も含む: false)) == []) // ▲角
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .９三, 移動先が自駒の場合も含む: false)) == [.９四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .８三, 移動先が自駒の場合も含む: false)) == [.８四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .７三, 移動先が自駒の場合も含む: false)) == [.７四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .６三, 移動先が自駒の場合も含む: false)) == [.６四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .５三, 移動先が自駒の場合も含む: false)) == [.５四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .４三, 移動先が自駒の場合も含む: false)) == [.４四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .３三, 移動先が自駒の場合も含む: false)) == [.３四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .２三, 移動先が自駒の場合も含む: false)) == [.２四]) // ▲歩
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .１三, 移動先が自駒の場合も含む: false)) == [.１四]) // ▲歩
	}
	@Test func T003() {
		let 局面 = try! 局面型(string:
			"""
			持駒: 角歩
			|▽香|▽桂|▽銀|▽金|▽玉|▽金|　・|▽桂|▽香|
			|　・|▽飛|　・|　・|　・|　・|▲歩|▽銀|　・|
			|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|▲桂|▽歩|▽歩|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|▲歩|　・|　・|　・|　・|　・|　・|
			|▲歩|▲歩|　・|▲歩|▲歩|▲歩|　・|　・|▲歩|
			|　・|　・|　・|　・|　・|　・|　・|▲飛|　・|
			|▲香|▲桂|▲銀|▲金|▲玉|▲金|▲銀|　・|▲香|
			持駒: 角歩
			手番: 先手
			""")
		let ３二歩指手 = 局面.可能指手列(位置列: [.３二]) // 不成不可
		#expect(Set(３二歩指手) == [.動(先手後手: .先手, 移動元: .３二, 移動先: .３一, 駒面: .歩, 成: true)])

		let ３三桂指手 = 局面.可能指手列(位置列: [.３三]) // 不成不可
		#expect(Set(３三桂指手) == [
			.動(先手後手: .先手, 移動元: .３三, 移動先: .４一, 駒面: .桂, 成: true),
			.動(先手後手: .先手, 移動元: .３三, 移動先: .２一, 駒面: .桂, 成: true)
		])
		
		let ５九玉指手 = 局面.可能指手列(位置列: [.５九])
		#expect(Set(５九玉指手) == [
			.動(先手後手: .先手, 移動元: .５九, 移動先: .６八, 駒面: .玉, 成: false),
			.動(先手後手: .先手, 移動元: .５九, 移動先: .５八, 駒面: .玉, 成: false),
			.動(先手後手: .先手, 移動元: .５九, 移動先: .４八, 駒面: .玉, 成: false)
		])
	}
	@Test func T004() {
		let 局面0 = try! 局面型(string:
			"""
			持駒: 角歩
			|▽香|▽桂|▽銀|▽金|▽玉|▽金|　・|▽桂|▽香|
			|　・|▽飛|　・|　・|　・|　・|▲歩|▽銀|　・|
			|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|▲桂|▽歩|▽歩|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|▲歩|　・|　・|　・|　・|　・|　・|
			|▲歩|▲歩|　・|▲歩|▲歩|▲歩|　・|　・|▲歩|
			|　・|　・|　・|　・|　・|　・|　・|▲飛|　・|
			|▲香|▲桂|▲銀|▲金|▲玉|▲金|▲銀|　・|▲香|
			持駒: 角歩
			手番: 先手
			""")
		let 局面1 = 局面0.実行(指手: .動(先手後手: .先手, 移動元: .３二, 移動先: .３一, 駒面: .歩, 成: true))!
		#expect(局面1.手番 == .後手)
		#expect(局面1.升列[.３一] == .先と)
		#expect(局面1.升列[.３二] == .空)

		let 局面2 = 局面0.実行(指手: .動(先手後手: .先手, 移動元: .３三, 移動先: .４一, 駒面: .桂, 成: true))!
		#expect(局面2.升列[.４一] == .先圭)
		#expect(局面2.升列[.３三] == .空)
		#expect(局面2.先手持駒[.金] == 1)
		#expect(局面0.先手持駒[.金] == nil)
	}

	@Test func T005() {
		let 局面 = try! 局面型(string:
			"""
			持駒: 角歩
			|▽香|▽桂|▽銀|▽金|▽玉|▽金|　・|▽桂|▽香|
			|　・|▽飛|　・|　・|　・|　・|▲歩|▽銀|　・|
			|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|▲桂|▽歩|▽歩|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|▲歩|　・|　・|　・|　・|　・|　・|
			|▲歩|▲歩|　・|▲歩|▲歩|▲歩|　・|　・|▲歩|
			|　・|　・|　・|　・|　・|　・|　・|▲飛|　・|
			|▲香|▲桂|▲銀|▲金|▲玉|▲金|▲銀|　・|▲香|
			持駒: 角歩
			手番: 先手
			""")
		let 可能手 = 局面.可能指手列()

		// 角の打てる場所
		let 角の打てる指手 = 可能手.filter {
			if case .打(_, _, let 駒) = $0, 駒 == .角 { return true }
			else { return false }
		}
		let 空位置 = 局面.探索(升群: [.空])
		#expect(空位置.count == 45)
		#expect(角の打てる指手.count == 45)
		
		// 歩の打てる場所
		let 歩の打てる指手 = 可能手.filter {
			if case .打(_, _, let 駒) = $0, 駒 == .歩 { return true }
			else { return false }
		}
		let 歩の打てる筋 = 歩の打てる指手.compactMap {
			if case .打(_, let 位置, let 駒) = $0, 駒 == .歩 { return 位置.筋 }
			else { return nil }
		}
		#expect(Set(歩の打てる筋) == [.２])
	}

	@Test func T006() {
		let 局面 = try! 局面型(string:
			"""
			持駒: 角歩
			|▽香|▽桂|▽銀|▽金|▽玉|▽金|　・|▽桂|▽香|
			|　・|▽飛|　・|　・|　・|　・|▲歩|▽銀|　・|
			|▽歩|▽歩|▽歩|▽歩|▽歩|　・|　・|▽歩|▽歩|
			|　・|　・|　・|　・|　・|▲桂|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|▲歩|　・|　・|　・|　・|　・|　・|
			|▲歩|▲歩|　・|▲歩|▲歩|▲歩|　・|　・|▲歩|
			|　・|▲角|　・|　・|　・|　・|　・|▲飛|　・|
			|▲香|▲桂|▲銀|▲金|▲玉|▲金|▲銀|　・|▲香|
			持駒: 歩
			手番: 先手
			""")
		// 王手探索
		let 王手可能手 = 局面.王手探索()
		#expect(Set(王手可能手) == [.動(先手後手: .先手, 移動元: .４四, 移動先: .５二, 駒面: .桂, 成: true)])
	}
	
	@Test func T007() {
		let 局面1 = try! 局面型(string:
			"""
			持駒: 飛角銀香
			|　・|▽桂|▽銀|▽金|　・|　・|▲金|　・|▽香|
			|　・|　・|　・|　・|　・|　・|▲歩|▽玉|　・|
			|▽歩|　・|　・|▽歩|▽金|　・|　・|▽歩|　・|
			|　・|▽歩|▽歩|　・|▲桂|　・|　・|　・|▽歩|
			|　・|　・|　・|▲歩|▲馬|▽歩|　・|▲桂|　・|
			|　・|　・|▲銀|　・|　・|▲歩|　・|　・|▲歩|
			|▲歩|▲歩|　・|　・|▲歩|▽金|▽と|▲歩|　・|
			|　・|　・|　・|　・|　・|　・|▲飛|　・|　・|
			|▲香|▲桂|　・|　・|　・|　・|▲玉|　・|▲香|
			持駒: 銀歩2
			手番: 後手
			""")
		#expect(局面1.詰判定 == false)

		let 局面2 = try! 局面型(string:
			"""
			持駒: 飛角香
			|　・|▽桂|▽銀|▽金|　・|　・|▲金|　・|▽香|
			|　・|　・|　・|　・|　・|▲圭|　・|▽玉|▽銀|
			|▽歩|　・|　・|▽歩|▽金|　・|▲と|▽歩|　・|
			|　・|▽歩|▽歩|　・|　・|　・|　・|　・|▽歩|
			|　・|　・|　・|▲歩|▲馬|▽歩|　・|▲桂|　・|
			|　・|　・|▲銀|　・|　・|▲歩|　・|　・|▲歩|
			|▲歩|▲歩|　・|　・|▲歩|▽金|▽と|▲歩|　・|
			|　・|　・|　・|　・|　・|　・|▲飛|　・|　・|
			|▲香|▲桂|　・|　・|　・|　・|▲玉|　・|▲香|
			持駒: 銀歩2
			手番: 後手
			""")
		#expect(局面2.詰判定 == true)
	}

	@Test func T008() {
		// 指手をコードで再利用可能な形に出力
		#expect(指手型.動(先手後手: .先手, 移動元: .３三, 移動先: .４一, 駒面: .桂, 成: true).code == ".動(先手後手: .先手, 移動元: .３三, 移動先: .４一, 駒面: .桂, 成: true)")
		#expect(指手型.動(先手後手: .後手, 移動元: .５九, 移動先: .６八, 駒面: .玉, 成: false).code == ".動(先手後手: .後手, 移動元: .５九, 移動先: .６八, 駒面: .玉, 成: false)")
		#expect(指手型.打(先手後手: .先手, 位置: .５五, 駒: .角).code == ".打(先手後手: .先手, 位置: .５五, 駒: .角)")
		#expect(指手型.終(終局理由: .詰, 勝者: .先手).code == ".終(終局理由: .詰, 勝者: .先手)")
		#expect(指手型.終(終局理由: .投了, 勝者: .後手).code == ".終(終局理由: .投了, 勝者: .後手)")
		#expect(指手型.終(終局理由: .千日手, 勝者: nil).code == ".終(終局理由: .千日手, 勝者: nil)")
	}

	@Test func T009() {
		let 局面 = self.初期局面
		// 特定の駒を盤面から検索
		#expect(Set(局面.探索(升群: [.先飛])) == [.２八])
		#expect(Set(局面.探索(升群: [.後金])) == [.４一, .６一])
		#expect(Set(局面.探索(升群: [.先歩])).count == 9)
	}

	@Test func T010() {
		let 局面 = try! 局面型(string:
			"""
			持駒: 飛角香
			|　・|▽桂|▽銀|▽金|　・|　・|▲金|　・|▽香|
			|　・|　・|　・|　・|　・|▲圭|　・|▽玉|▽銀|
			|▽歩|　・|　・|▽歩|▽金|　・|▲と|▽歩|　・|
			|　・|▽歩|▽歩|　・|　・|　・|　・|　・|▽歩|
			|　・|　・|　・|▲歩|▲馬|▽歩|　・|▲桂|　・|
			|　・|　・|▲銀|　・|　・|▲歩|　・|　・|▲歩|
			|▲歩|▲歩|　・|　・|▲歩|▽金|▽と|▲歩|　・|
			|　・|　・|　・|　・|　・|　・|▲飛|　・|　・|
			|▲香|▲桂|　・|　・|　・|　・|▲玉|　・|▲香|
			持駒: 銀歩2
			手番: 後手
			""")
		// 持ち駒検証
		#expect(局面.先手持駒 == [.銀: 1, .歩: 2])
		#expect(局面.後手持駒 == [.飛: 1, .角: 1, .香: 1])
	}

	@Test func T011() {
		#expect(対局型(手合: .平手).局面.探索(升群: [.先玉]) == [.５九])
		#expect(Set(対局型(手合: .平手).局面.探索(升群: [.後歩])) == [.９三, .８三, .７三, .６三, .５三, .４三, .３三, .２三, .１三] )
	}

	@Test func T012() {
		let 局面 = try! 局面型(string:
			"""
			持駒: 角歩
			|▽香|▽桂|▽銀|▽金|▽玉|▽金|　・|▽桂|▽香|
			|　・|▽飛|　・|　・|　・|　・|▲歩|▽銀|　・|
			|▽歩|▽歩|▽歩|▽歩|▽歩|　・|　・|▽歩|▽歩|
			|　・|　・|　・|　・|　・|▲桂|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|▲歩|　・|　・|　・|　・|　・|　・|
			|▲歩|▲歩|　・|▲歩|▲歩|▲歩|　・|　・|▲歩|
			|　・|▲角|　・|　・|　・|　・|　・|▲飛|　・|
			|▲香|▲桂|▲銀|▲金|▲玉|▲金|▲銀|　・|▲香|
			持駒: 歩
			手番: 先手
			""")
		#expect(局面.歩の数(先手後手: .先手, 筋: .１) == 1)
		#expect(局面.歩の数(先手後手: .先手, 筋: .２) == 0)
		#expect(局面.歩の数(先手後手: .後手, 筋: .５) == 1)
		#expect(局面.歩の数(先手後手: .後手, 筋: .３) == 0)
	}

	@Test func T013() {
		let 初期局面 = self.初期局面
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .５九, 移動先が自駒の場合も含む: false)) == [.６八, .５八, .４八])
		#expect(Set(初期局面.指定位置の駒が移動可能な位置列(指定位置: .５九, 移動先が自駒の場合も含む: true)) == [.６八, .５八, .４八, .６九, .４九])
	}
	@Test func T014() {
		let 初期局面 = self.初期局面
		#expect(Set(初期局面.全移動可能位置列(手番: .先手, 移動先が自駒の場合も含む: false)) ==
			[.１六, .１八, .２六, .３六, .３八, .４六, .４八, .５六, .５八, .６六, .６八, .７六, .７八, .８六, .９六, .９八])
		#expect(Set(初期局面.全移動可能位置列(手番: .先手, 移動先が自駒の場合も含む: true)) ==
			[.１六, .１七, .１八, .２六, .２七, .２八, .２九, .３六, .３七, .３八, .３九, .４六, .４八, .４九, .５六, .５八, .５九,
			 .６六, .６八, .６九, .７六, .７七, .７八, .７九, .８六, .８八, .９六, .９七, .９八, .９九])

		print(初期局面.全移動可能位置列(手番: .先手, 移動先が自駒の場合も含む: true))
	}
	@Test func T015() {
		let string1 =
			"""
			持駒: 角歩
			|▽香|▽桂|▽銀|▽金|▽玉|▽金|　・|▽桂|▽香|
			|　・|▽飛|　・|　・|　・|　・|▲歩|▽銀|　・|
			|▽歩|▽歩|▽歩|▽歩|▽歩|▽歩|▲桂|▽歩|▽歩|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|　・|　・|▲歩|　・|　・|　・|　・|　・|　・|
			|▲歩|▲歩|　・|▲歩|▲歩|▲歩|　・|　・|▲歩|
			|　・|　・|　・|　・|　・|　・|　・|▲飛|　・|
			|▲香|▲桂|▲銀|▲金|▲玉|▲金|▲銀|　・|▲香|
			持駒: 角歩
			手番: 先手
			"""
		let 局面 = try! 局面型(string: string1)
		let string2 = 局面.string
		#expect(string1.lines == string2.lines)
	}

	@Test func T016() {
		let 局面 = try! 局面型(string:
			"""
			持駒: 角金銀桂歩
			|▽香|　・|▲馬|　・|　・|　・|▲角|　・|▽香|
			|　・|　・|　・|▽銀|　・|▲竜|　・|▲圭|　・|
			|　・|　・|　・|▽玉|　・|　・|　・|　・|▽歩|
			|▽歩|　・|▽歩|▽歩|▽歩|▽歩|　・|▲歩|　・|
			|　・|▲金|　・|　・|　・|　・|　・|▲飛|　・|
			|▲歩|▽歩|▲歩|　・|　・|　・|　・|　・|　・|
			|　・|▲銀|　・|▲歩|▲玉|　・|▽と|　・|▲香|
			|　・|　・|　・|　・|　・|　・|　・|　・|　・|
			|▲香|▲桂|　・|　・|　・|　・|　・|　・|　・|
			持駒: 飛角金3銀2桂歩6
			手番: 先手
			""")
		#expect(Set(局面.指定位置に移動可能な駒の位置列(手番: .先手, 指定位置: .６二)) == [.７一, .４二])
		let 王手 = 局面.王手探索()
		#expect(Set(王手) == [
			.打(先手後手: .先手, 位置: .８一, 駒: .角),
			.動(先手後手: .先手, 移動元: .７一, 移動先: .８一, 駒面: .馬, 成: false),
			.動(先手後手: .先手, 移動元: .７一, 移動先: .７二, 駒面: .馬, 成: false),
			.動(先手後手: .先手, 移動元: .７一, 移動先: .６二, 駒面: .馬, 成: false),
			.打(先手後手: .先手, 位置: .４一, 駒: .角),
			.打(先手後手: .先手, 位置: .７二, 駒: .角),
			.打(先手後手: .先手, 位置: .７二, 駒: .銀),
			.打(先手後手: .先手, 位置: .５二, 駒: .角),
			.打(先手後手: .先手, 位置: .５二, 駒: .銀),
			.動(先手後手: .先手, 移動元: .４二, 移動先: .５三, 駒面: .竜, 成: false),
			.動(先手後手: .先手, 移動元: .４二, 移動先: .３三, 駒面: .竜, 成: false),
			.動(先手後手: .先手, 移動元: .４二, 移動先: .５二, 駒面: .竜, 成: false),
			.動(先手後手: .先手, 移動元: .４二, 移動先: .６二, 駒面: .竜, 成: false),
			.動(先手後手: .先手, 移動元: .４二, 移動先: .４三, 駒面: .竜, 成: false),
			.打(先手後手: .先手, 位置: .９三, 駒: .飛),
			.打(先手後手: .先手, 位置: .８三, 駒: .飛),
			.打(先手後手: .先手, 位置: .７三, 駒: .飛),
			.打(先手後手: .先手, 位置: .７三, 駒: .金),
			.打(先手後手: .先手, 位置: .５三, 駒: .飛),
			.打(先手後手: .先手, 位置: .５三, 駒: .金),
			.打(先手後手: .先手, 位置: .４三, 駒: .飛),
			.打(先手後手: .先手, 位置: .３三, 駒: .飛),
			.打(先手後手: .先手, 位置: .２三, 駒: .飛),
			.動(先手後手: .先手, 移動元: .８五, 移動先: .７四, 駒面: .金, 成: false),
			.打(先手後手: .先手, 位置: .７五, 駒: .桂),
			.打(先手後手: .先手, 位置: .５五, 駒: .桂)
		])
	}


	@Test func T201() {
		let 対局 = 対局型(string:
"""
' ---- ぴよ将棋w 棋譜ファイル ----
$START_TIME:2021/12/15 03:47:41
$END_TIME:2021/12/15 03:52:39
N+Lv20 ピヨ馬(R1050)
N-Lv20 ピヨ馬(R1050)
$EVENT:ぴよ将棋w
PI
+
+2726FU,T1
-3334FU,T1
+2625FU,T1
-3132GI,T1
+2524FU,T1
-2324FU,T1
+2824HI,T1
-2233KA,T1
+2428HI,T1
-4131KI,T1
+0024FU,T1
-0022FU,T1
+7776FU,T1
-8384FU,T1
+6978KI,T1
-8485FU,T1
+5969OU,T1
-6152KI,T1
+9796FU,T1
-8586FU,T1
+8786FU,T1
-8286HI,T1
+8833UM,T1
-2133KE,T1
+7988GI,T1
-3345KE,T1
+4958KI,T1
-7162GI,T1
+4746FU,T1
-8682HI,T1
+4645FU,T1
-0086FU,T1
+0087FU,T1
-8687TO,T1
+7887KI,T1
-0086FU,T1
+8777KI,T1
-5142OU,T1
+6968OU,T1
-0035KA,T1
+3948GI,T1
-9394FU,T1
+4847GI,T1
-6364FU,T1
+3736FU,T1
-3517UM,T1
+1917KY,T1
-7374FU,T1
+0061KA,T1
-5251KI,T1
+0083KA,T1
-6263GI,T1
+4544FU,T1
-4344FU,T1
+0055KE,T1
-6354GI,T1
+6172UM,T1
-8272HI,T1
+8372UM,T1
-5455GI,T1
+7281UM,T1
-0065KE,T1
+7786KI,T1
-0039KA,T1
+2825HI,T1
-3957UM,T1
+5857KI,T1
-6557NK,T1
+6857OU,T1
-0085FU,T1
+8685KI,T1
-0087FU,T1
+8887GI,T1
-3435FU,T1
+2535HI,T1
-0045KI,T1
+0034KE,T1
-4243OU,T1
+3525HI,T1
-5354FU,T1
+2937KE,T1
-5546GI,T1
+4746GI,T1
-4546KI,T1
+5746OU,T1
-5152KI,T1
+4657OU,T1
-0035FU,T1
+0061HI,T1
-3536FU,T1
+6131RY,T1
-0086FU,T1
+3422NK,T1
-4353OU,T1
+3132RY,T1
-3637TO,T1
+8171UM,T1
-0062GI,T1
+0031KA,T1
-5242KI,T1
+3242RY,T1
-5363OU,T1
+7162UM,T1
%TORYO
""")
		if let 対局 { print("対局", 対局) }
	}


}
